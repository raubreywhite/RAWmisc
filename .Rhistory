a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
summary(fit)
devtools::load_all(".")
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
summary(fit)
summary(fit)
names(summary(fit))
as.data.frame(summary(fit))
b <- as.data.frame(summary(fit))
b
coef
Reduce
deparse
sprintf
model.frame
coef
vcov
is.na
na.omit
devtools::load_all(".")
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
assign("ddist0", ddist0, envir=globalenv())
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
data
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
assign("data", data, envir=globalenv())
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
assign("ddist0", ddist0, envir=globalenv())
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
b <- as.data.frame(summary(fit))
a$c_b
b$Effect
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2*interaction+rnorm(100)
data <- data.frame(x,y,interaction)
fit <- lm(y~x*interaction,data=data)
ExtractInteractedEffectEstimates(
beta=coef(fit),
va=vcov(fit),
nameBase="x",
nameInteractions="x:interaction")
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2*interaction+rnorm(100)
data <- data.frame(x,y,interaction)
fit <- lm(y~x*interaction,data=data)
ExtractInteractedEffectEstimates(
beta=coef(fit),
va=vcov(fit),
nameBase="x",
nameInteractions="x:interaction")
round(res$beta*10)/10
res <- ExtractInteractedEffectEstimates(
beta=coef(fit),
va=vcov(fit),
nameBase="x",
nameInteractions="x:interaction")
round(res$beta*10)/10
aic(fit)
aic(fit0)
AIC(fit0)
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
data <- data.frame(x,y,interaction)
fit0 <- lm(y~1,data=data)
fit1 <- lm(y~x,data=data)
ExtractFits(fit0=fit0,fit1=fit1)
devtools::load_all(".")
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
data <- data.frame(x,y,interaction)
fit0 <- lm(y~1,data=data)
fit1 <- lm(y~x,data=data)
ExtractFits(fit0=fit0,fit1=fit1)
round(a$c_b[2]*10)/10
a <- ExtractFits(fit0=fit0,fit1=fit1)
round(a$c_b[2]*10)/10
round(a$b[2]*10)/10
x*2+rnorm(100)
x*2/100
sample
y <- sample(c(1,0),size=length(y),replace=T,prob=y)
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2
y <- y/max(y)
y <- sample(c(1,0),size=length(y),replace=T,prob=y)
runif(length(y))
y <- ifelse(runif(length(y))<y,1,0)
y
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2
y <- y/max(y)
y <- ifelse(runif(length(y))<y,1,0)
data <- data.frame(x,y,interaction)
fit0 <- glm(y~1,data=data,family=binomial())
fit1 <- glm(y~x,data=data,family=binomial())
a <- ExtractFits(fit0=fit0,fit1=fit1)
a
round(a$b[2]*10)/10
exp(0.04)
y
x <- 1:100
interaction <- rep(c(0,1),50)
y <- round(x*2+rnorm(100))
data <- data.frame(x,y,interaction)
fit0 <- glm(y~1,data=data,family=poisson())
fit1 <- glm(y~x,data=data,family=poisson())
a <- ExtractFits(fit0=fit0,fit1=fit1)
a
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- round(x*2+rnorm(100))
data <- data.frame(x,y,interaction)
fit0 <- glm(y~1,data=data,family=poisson())
fit1 <- glm(y~x,data=data,family=poisson())
a <- ExtractFits(fit0=fit0,fit1=fit1)
a
AIC
for(j in NULL)print(1)
res <- NA
var <- NA
var <- na.omit(unique(var))
var
length(var)
devtools::load_all(".")
library(rms)
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
assign("data", data, envir=globalenv())
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
assign("ddist0", ddist0, envir=globalenv())
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
RAWmisc::ProcessStack(stack=stack,i=1)
if (!stack$regressionType[[i]] %in% c("logistic", "linear","poisson")) {
stop("Non-supported regression type")
}
regressionType <- NULL
outcome <- NULL
a_est <- NULL
a_b <- NULL
a_se <- NULL
c_est <- NULL
c_b <- NULL
c_se <- NULL
if (stack$regressionType[[i]] == "logistic") {
analysisFamily <- binomial()
expResults <- TRUE
} else if(stack$regressionType[[i]] == "linear"){
analysisFamily <- gaussian()
expResults <- FALSE
} else if(stack$regressionType[[i]] == "poisson"){
analysisFamily <- poisson()
expResults <- TRUE
}
form_crude0 <- sprintf(
"%s~%s",
stack$outcome[[i]],
1
)
form_crude1 <- sprintf(
"%s~%s",
stack$outcome[[i]],
paste0(stack$exposure[[i]], collapse = "+")
)
adjustedModelExists <- TRUE
if (length(stack$confounders[[i]]) == 1) {
if (is.na(stack$confounders[[i]])) {
adjustedModelExists <- FALSE
}
}
if (!adjustedModelExists) {
form_adj0 <- form_crude0
form_adj1 <- form_crude1
} else {
form_adj0 <- sprintf(
"%s~%s",
stack$outcome[[i]],
paste0(stack$confounders[[i]], collapse = "+")
)
form_adj1 <- sprintf(
"%s~%s+%s",
stack$outcome[[i]],
paste0(stack$exposure[[i]], collapse = "+"),
paste0(stack$confounders[[i]], collapse = "+")
)
}
fit <- list()
dataCrude <- copy(get(stack$data[[i]]))
setDT(dataCrude)
for (j in RAWmisc::ExtractExposureConfounders(stack$exposure[[i]])) {
dataCrude <- dataCrude[!is.na(dataCrude[[j]])]
}
dataAdj <- copy(dataCrude)
for (j in RAWmisc::ExtractExposureConfounders(stack$confounders[[i]])) {
if (is.na(j)) next
dataAdj <- dataAdj[!is.na(dataAdj[[j]])]
}
for (j in c("crude0", "crude1", "adj0", "adj1")) {
if (j %in% c("crude0", "crude1")) {
dataUse <- dataCrude
} else {
dataUse <- dataAdj
}
fit[[j]] <- glm(
as.formula(get(sprintf("form_%s", j))),
data = dataUse,
family = analysisFamily
)
}
i=1
if (!stack$regressionType[[i]] %in% c("logistic", "linear","poisson")) {
stop("Non-supported regression type")
}
regressionType <- NULL
outcome <- NULL
a_est <- NULL
a_b <- NULL
a_se <- NULL
c_est <- NULL
c_b <- NULL
c_se <- NULL
if (stack$regressionType[[i]] == "logistic") {
analysisFamily <- binomial()
expResults <- TRUE
} else if(stack$regressionType[[i]] == "linear"){
analysisFamily <- gaussian()
expResults <- FALSE
} else if(stack$regressionType[[i]] == "poisson"){
analysisFamily <- poisson()
expResults <- TRUE
}
form_crude0 <- sprintf(
"%s~%s",
stack$outcome[[i]],
1
)
form_crude1 <- sprintf(
"%s~%s",
stack$outcome[[i]],
paste0(stack$exposure[[i]], collapse = "+")
)
adjustedModelExists <- TRUE
if (length(stack$confounders[[i]]) == 1) {
if (is.na(stack$confounders[[i]])) {
adjustedModelExists <- FALSE
}
}
if (!adjustedModelExists) {
form_adj0 <- form_crude0
form_adj1 <- form_crude1
} else {
form_adj0 <- sprintf(
"%s~%s",
stack$outcome[[i]],
paste0(stack$confounders[[i]], collapse = "+")
)
form_adj1 <- sprintf(
"%s~%s+%s",
stack$outcome[[i]],
paste0(stack$exposure[[i]], collapse = "+"),
paste0(stack$confounders[[i]], collapse = "+")
)
}
fit <- list()
dataCrude <- copy(get(stack$data[[i]]))
setDT(dataCrude)
for (j in RAWmisc::ExtractExposureConfounders(stack$exposure[[i]])) {
dataCrude <- dataCrude[!is.na(dataCrude[[j]])]
}
dataAdj <- copy(dataCrude)
for (j in RAWmisc::ExtractExposureConfounders(stack$confounders[[i]])) {
if (is.na(j)) next
dataAdj <- dataAdj[!is.na(dataAdj[[j]])]
}
for (j in c("crude0", "crude1", "adj0", "adj1")) {
if (j %in% c("crude0", "crude1")) {
dataUse <- dataCrude
} else {
dataUse <- dataAdj
}
fit[[j]] <- glm(
as.formula(get(sprintf("form_%s", j))),
data = dataUse,
family = analysisFamily
)
}
library(data.table)
if (!stack$regressionType[[i]] %in% c("logistic", "linear","poisson")) {
stop("Non-supported regression type")
}
regressionType <- NULL
outcome <- NULL
a_est <- NULL
a_b <- NULL
a_se <- NULL
c_est <- NULL
c_b <- NULL
c_se <- NULL
if (stack$regressionType[[i]] == "logistic") {
analysisFamily <- binomial()
expResults <- TRUE
} else if(stack$regressionType[[i]] == "linear"){
analysisFamily <- gaussian()
expResults <- FALSE
} else if(stack$regressionType[[i]] == "poisson"){
analysisFamily <- poisson()
expResults <- TRUE
}
form_crude0 <- sprintf(
"%s~%s",
stack$outcome[[i]],
1
)
form_crude1 <- sprintf(
"%s~%s",
stack$outcome[[i]],
paste0(stack$exposure[[i]], collapse = "+")
)
adjustedModelExists <- TRUE
if (length(stack$confounders[[i]]) == 1) {
if (is.na(stack$confounders[[i]])) {
adjustedModelExists <- FALSE
}
}
if (!adjustedModelExists) {
form_adj0 <- form_crude0
form_adj1 <- form_crude1
} else {
form_adj0 <- sprintf(
"%s~%s",
stack$outcome[[i]],
paste0(stack$confounders[[i]], collapse = "+")
)
form_adj1 <- sprintf(
"%s~%s+%s",
stack$outcome[[i]],
paste0(stack$exposure[[i]], collapse = "+"),
paste0(stack$confounders[[i]], collapse = "+")
)
}
fit <- list()
dataCrude <- copy(get(stack$data[[i]]))
setDT(dataCrude)
for (j in RAWmisc::ExtractExposureConfounders(stack$exposure[[i]])) {
dataCrude <- dataCrude[!is.na(dataCrude[[j]])]
}
dataAdj <- copy(dataCrude)
for (j in RAWmisc::ExtractExposureConfounders(stack$confounders[[i]])) {
if (is.na(j)) next
dataAdj <- dataAdj[!is.na(dataAdj[[j]])]
}
for (j in c("crude0", "crude1", "adj0", "adj1")) {
if (j %in% c("crude0", "crude1")) {
dataUse <- dataCrude
} else {
dataUse <- dataAdj
}
fit[[j]] <- glm(
as.formula(get(sprintf("form_%s", j))),
data = dataUse,
family = analysisFamily
)
}
fit0 = fit[["crude0"]]
fit1 = fit[["crude1"]]
data=dataCrude
sp <- NULL
eval(parse(text=sprintf("sp <- with(data,%s)",stack$exposure)))
dataNew0 <- data[1,]
dataNew0[[RAWmisc::ExtractExposureConfounders(stack$exposure[[i]])]] <- 0
dataNew1 <- data[1,]
dataNew1[[RAWmisc::ExtractExposureConfounders(stack$exposure[[i]])]] <- 1
newFormula <- stringr::str_replace_all(Reduce(paste, deparse(fit1$formula))," ","")
newFormula <- stringr::str_replace_all(newFormula,"ns(\\([a-zA-Z0-9_,=]*\\))","ns\\1&&")
newFormula <- stringr::str_replace_all(newFormula,"\\)&&",
sprintf(",knots=%s,intercept=%s,Boundary.knots=%s\\)",
sprintf("c(%s)",paste0(attributes(sp)$knots,collapse=",")),
attributes(sp)$intercept,
sprintf("c(%s)",paste0(attributes(sp)$Boundary.knots,collapse=","))
))
newFormula
m0temp <- model.frame(newFormula,data=dataNew0)
m1temp <- model.frame(newFormula,data=dataNew1)
m0 <- c(1)
m1 <- c(1)
# starts from 2 to avoid the Y, which is the first value!!
for(i in 2:length(m0temp)){
if(!is.factor(m0temp[[i]])){
m0 <- c(m0,m0temp[[i]])
} else {
m0 <- c(m0,as.numeric(levels(m0temp[[i]])==m0temp[[i]])[-1])
}
}
for(i in 2:length(m1temp)){
if(!is.factor(m1temp[[i]])){
m1 <- c(m1,m1temp[[i]])
} else {
m1 <- c(m1,as.numeric(levels(m1temp[[i]])==m1temp[[i]])[-1])
}
}
changedVars <- m0!=m1
m0 <- matrix(m0,nrow=1)
m1 <- matrix(m1,nrow=1)
estDif <- (m1[,changedVars]-m0[,changedVars]) %*% coef(fit1)[changedVars]
newVCOV <- vcov(fit1)[changedVars,changedVars]
newVCOV <- rbind(newVCOV,newVCOV)
newVCOV <- cbind(newVCOV,newVCOV)
m <- c(m1[,changedVars],-m0[,changedVars])
newVar <- 0
for(j in 1:length(m)) for(k in 1:length(m)) newVar <- newVar + m[j]*m[k]*newVCOV[j,k]
p_lrt <- RAWmisc::LRTest(fit0, fit1)
res <- data.frame("b"=estDif,
"se"=sqrt(newVar),
"z"=estDif/sqrt(newVar),
"p_wald" = RAWmisc::CalcPValue(beta=estDif,se=sqrt(newVar)))
res
res$exposure <- sprintf("0 to 1, %s",stack$exposure[[i]])
res$n <- sum(!is.na(fit1$fitted.values))
res$p_lrt <- p_lrt
res <- res[, c("exposure", "n", "b", "se", "z", "p_wald", "p_lrt")]
res$aic <- AIC(fit1)
