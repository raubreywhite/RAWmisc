stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::bs(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
Glm(y ~ rcs(x,3), data=data, family=gaussian())
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian())
fit0 <- lm(y~splines::ns(x,df=2),data=data)
fit0
summary(fit0)
fit0 <- lm(y~splines::ns(x,df=3),data=data)
fit0
summary(fit)
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian())
summary(fit)
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian())
summary(fit)
px <- Predict(fit,
x=c(0,1),
ref.zero=T)
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian())
px <- Predict(fit,
x=c(1),
ref.zero=T)
px <- Predict(fit,
x=c(1,2),
ref.zero=T)
fit
summary(fit)
Predict
Predict(fit,
x=c(1,2),
ref.zero=T)
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
px <- Predict(fit,
x=c(1,2),
ref.zero=T)
fit
summary(fit)
px <- Predict(fit,
"x"=c(1,2),
ref.zero=T)
ddist0
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*1+rnorm(100)
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
summary(a)
a
summary(fit)
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*0.2+rnorm(100)
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
summary(fit)
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*0.02+rnorm(100)
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
summary(fit)
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*0.02+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
summary(fit)
y
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
summary(fit)
fit0
summary(fit)
summary(fit0)
i
i=1
if (!stack$regressionType[[i]] %in% c("logistic", "linear")) {
stop("Non-supported regression type")
}
regressionType <- NULL
a_est <- NULL
a_b <- NULL
a_se <- NULL
c_est <- NULL
c_b <- NULL
c_se <- NULL
if (stack$regressionType[[i]] == "logistic") {
analysisFamily <- binomial()
expResults <- TRUE
} else {
analysisFamily <- gaussian()
expResults <- FALSE
}
form_crude0 <- sprintf(
"%s~%s",
stack$outcome[[i]],
1
)
form_crude1 <- sprintf(
"%s~%s",
stack$outcome[[i]],
paste0(stack$exposure[[i]], collapse = "+")
)
adjustedModelExists <- TRUE
if (length(stack$confounders[[i]]) == 1) {
if (is.na(stack$confounders[[i]])) {
adjustedModelExists <- FALSE
}
}
if (!adjustedModelExists) {
form_adj0 <- form_crude0
form_adj1 <- form_crude1
} else {
form_adj0 <- sprintf(
"%s~%s",
stack$outcome[[i]],
paste0(stack$confounders[[i]], collapse = "+")
)
form_adj1 <- sprintf(
"%s~%s+%s",
stack$outcome[[i]],
paste0(stack$exposure[[i]], collapse = "+"),
paste0(stack$confounders[[i]], collapse = "+")
)
}
fit <- list()
dataCrude <- copy(get(stack$data[[i]]))
setDT(dataCrude)
for (j in RAWmisc::ExtractExposureConfounders(stack$exposure[[i]])) {
dataCrude <- dataCrude[!is.na(dataCrude[[j]])]
}
dataAdj <- copy(dataCrude)
for (j in RAWmisc::ExtractExposureConfounders(stack$confounders[[i]])) {
if (is.na(j)) next
dataAdj <- dataAdj[!is.na(dataAdj[[j]])]
}
for (j in c("crude0", "crude1", "adj0", "adj1")) {
if (j %in% c("crude0", "crude1")) {
dataUse <- dataCrude
} else {
dataUse <- dataAdj
}
fit[[j]] <- glm(
as.formula(get(sprintf("form_%s", j))),
data = dataUse,
family = analysisFamily
)
}
fit
RAWmisc::DetectSpline(stack$exposure[[i]])){
RAWmisc::DetectSpline(stack$exposure[[i]])
res_crude <- RAWmisc::ExtractFitsSplines(
fit0 = fit[["crude0"]],
fit1 = fit[["crude1"]],
stack = stack,
i = i,
data=dataCrude)
res_crude
devtools::load_all(".")
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
summary(fit)
devtools::load_all(".")
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
summary(fit)
devtools::load_all(".")
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
a
summary(fit)
summary(fit)
names(summary(fit))
as.data.frame(summary(fit))
b <- as.data.frame(summary(fit))
b
coef
Reduce
deparse
sprintf
model.frame
coef
vcov
is.na
na.omit
devtools::load_all(".")
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
assign("ddist0", ddist0, envir=globalenv())
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
data
library(rms)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
y[x>50] <- y[x>50]*2
x <- x/100
data <- data.frame(x,y,interaction)
assign("data", data, envir=globalenv())
fit0 <- lm(y~splines::ns(x,df=2),data=data)
ddist0 <- datadist(data)
ddist0$limits[["x"]][2] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][1] <- 0 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
ddist0$limits[["x"]][3] <- 1 ##### SETTING REFERENCE VALUE FOR NEUROTICISM
assign("ddist0", ddist0, envir=globalenv())
options(datadist='ddist0')
fit <- Glm(y ~ rcs(x,3), data=data, family=gaussian(),x=T,y=T)
summary(fit)
stack <- RAWmisc::CreateStackSkeleton(n=length(1))
stack$regressionType <- "linear"
stack$outcome <- "y"
stack$exposure <- "splines::ns(x,df=2)"
stack$confounders <- list(c("interaction"))
stack$data <- "data"
a <- RAWmisc::ProcessStack(stack=stack,i=1)
b <- as.data.frame(summary(fit))
a$c_b
b$Effect
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2*interaction+rnorm(100)
data <- data.frame(x,y,interaction)
fit <- lm(y~x*interaction,data=data)
ExtractInteractedEffectEstimates(
beta=coef(fit),
va=vcov(fit),
nameBase="x",
nameInteractions="x:interaction")
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2*interaction+rnorm(100)
data <- data.frame(x,y,interaction)
fit <- lm(y~x*interaction,data=data)
ExtractInteractedEffectEstimates(
beta=coef(fit),
va=vcov(fit),
nameBase="x",
nameInteractions="x:interaction")
round(res$beta*10)/10
res <- ExtractInteractedEffectEstimates(
beta=coef(fit),
va=vcov(fit),
nameBase="x",
nameInteractions="x:interaction")
round(res$beta*10)/10
aic(fit)
aic(fit0)
AIC(fit0)
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
data <- data.frame(x,y,interaction)
fit0 <- lm(y~1,data=data)
fit1 <- lm(y~x,data=data)
ExtractFits(fit0=fit0,fit1=fit1)
devtools::load_all(".")
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2+rnorm(100)
data <- data.frame(x,y,interaction)
fit0 <- lm(y~1,data=data)
fit1 <- lm(y~x,data=data)
ExtractFits(fit0=fit0,fit1=fit1)
round(a$c_b[2]*10)/10
a <- ExtractFits(fit0=fit0,fit1=fit1)
round(a$c_b[2]*10)/10
round(a$b[2]*10)/10
x*2+rnorm(100)
x*2/100
sample
y <- sample(c(1,0),size=length(y),replace=T,prob=y)
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2
y <- y/max(y)
y <- sample(c(1,0),size=length(y),replace=T,prob=y)
runif(length(y))
y <- ifelse(runif(length(y))<y,1,0)
y
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- x*2
y <- y/max(y)
y <- ifelse(runif(length(y))<y,1,0)
data <- data.frame(x,y,interaction)
fit0 <- glm(y~1,data=data,family=binomial())
fit1 <- glm(y~x,data=data,family=binomial())
a <- ExtractFits(fit0=fit0,fit1=fit1)
a
round(a$b[2]*10)/10
exp(0.04)
y
x <- 1:100
interaction <- rep(c(0,1),50)
y <- round(x*2+rnorm(100))
data <- data.frame(x,y,interaction)
fit0 <- glm(y~1,data=data,family=poisson())
fit1 <- glm(y~x,data=data,family=poisson())
a <- ExtractFits(fit0=fit0,fit1=fit1)
a
set.seed(4)
x <- 1:100
interaction <- rep(c(0,1),50)
y <- round(x*2+rnorm(100))
data <- data.frame(x,y,interaction)
fit0 <- glm(y~1,data=data,family=poisson())
fit1 <- glm(y~x,data=data,family=poisson())
a <- ExtractFits(fit0=fit0,fit1=fit1)
a
AIC
